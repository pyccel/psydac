# This workflow will install Python dependencies and run tests with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Run tests

on:
  push:
    branches: [ devel ]
  pull_request:
    branches: [ devel ]

jobs:
  Linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install non-Python dependencies
      run: |
        sudo apt-get update
        sudo apt-get install gfortran
        sudo apt-get install openmpi-bin libopenmpi-dev
        sudo apt-get install libhdf5-openmpi-dev
        ompi_info
        h5pcc -showconfig -echo || true

    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip

    - name: Get pip cache dir
      id: pip-cache-dir
      run: |
        echo "::set-output name=dir::$(python -m pip cache dir)"

    - name: pip cache
      uses: actions/cache@v2
      id: pip-cache
      with:
        path: ${{ steps.pip-cache-dir.outputs.dir }}
        key: ${{ matrix.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.python-version }}-pip-

    - name: Install Python dependencies
#      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: |
        export CC="mpicc" HDF5_MPI="ON" HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/openmpi
        python -m pip install wheel setuptools 'numpy>=1.16,<1.22' 'Cython>=0.25'
        python -m pip install --no-build-isolation -r requirements.txt --verbose
        python -m pip list
      
    - name: Install project
      run: |
        python -m pip install . --verbose
        pyccel psydac/core/kernels.py --language fortran
        pyccel psydac/core/bsplines_pyccel.py --language fortran
        python -m pip freeze

    - name: Initialize test directory
      run: |
        mkdir pytest
        cp mpi_tester.py pytest

    - name: Test with pytest
      working-directory: ./pytest
      run: |
        export PSYDAC_MESH_DIR=$GITHUB_WORKSPACE/mesh
        python -m pytest --pyargs psydac -m "not parallel" -k "geometry"
#        python -m pytest --pyargs psydac -m "not parallel"
#        python mpi_tester.py --pyargs psydac -m "parallel"

    - name: Remove test directory
      if: ${{ always() }}
      run: |
        rm -rf pytest
