# This workflow will install Python dependencies and run tests with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Unit tests

on:
  push:
    branches: [ devel ]
  pull_request:
    branches: [ devel ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install non-Python dependencies
      run: |
        sudo apt-get install gfortran
        sudo apt-get install openmpi-bin libopenmpi-dev
        sudo apt-get install libhdf5-openmpi-dev
        ompi_info
        h5pcc -showconfig -echo || true
        export CC="mpicc" HDF5_MPI="ON" HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/openmpi

    - name: Upgrade pip and uninstall pyccel components
      run: |
        python -m pip install --upgrade pip
        python -m pip uninstall -y psydac
        python -m pip uninstall -y sympde
        python -m pip uninstall -y pyccel
        python -m pip uninstall -y gelato

    - name: Get pip cache dir
      id: pip-cache-dir
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: pip cache
      uses: actions/cache@v2
      id: pip-cache
      with:
        path: ${{ steps.pip-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install numpy>=1.16
        python -m pip install -r requirements.txt
      
    - name: Install project
      run: |
        python -m pip install .
        python -m pip install numba
        python -m pip freeze

    - name: Initialize test directory
      run: |
        mkdir pytest
        cp mpi_tester.py pytest
        export PSYDAC_MESH_DIR=$PWD/mesh

    - name: Test with pytest
      working-directory: ./pytest
      run: |
        pytest -m pytest --pyargs psydac -m "not parallel"
        python mpi_tester.py --pyargs psydac -m "parallel"

    - name: Remove test directory
      if: ${{ always() }}
      run: |
        rm -rf pytest
