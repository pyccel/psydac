import pytest


@pytest.mark.pyccel
def test_epyccel_flags():

    from pyccel.epyccel import epyccel
    from psydac.api.settings import PSYDAC_BACKEND_GPYCCEL as backend

    kwargs = {'language'     : 'fortran',
              'compiler'     : backend['compiler'],
              'fflags'       : backend['flags'],
              'accelerators' : ['openmp'] if backend['openmp'] else [],
              'verbose'      : True,
              }

    # Function to be Pyccel-ized
    def f(x : float):
        return 3 * x

    # Pyccel magic
    # ------------
    # Fortran code is generated and then compiled with the selected compiler.
    # The compiled function is callable from Python through the C Python API.
    # The necessary C wrapper functions are also generated by Pyccel.
    fast_f = epyccel(f, **kwargs)

    # Check output of pyccelized function
    assert fast_f(3.5) == f(3.5)


# Interactive usage
if __name__ == '__main__':
    test_epyccel_flags()
    print('PASSED')
