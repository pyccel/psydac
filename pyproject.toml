[build-system]
requires = ["setuptools >= 64.0", "wheel", "numpy", "pyccel >= 1.9.2"]
build-backend = "setuptools.build_meta"

[project]
name            = "psydac"
version         = "0.1"
description     = "Python package for isogeometric analysis (IGA)"
readme          = "README.md"
requires-python = ">= 3.9, < 3.13"
license         = {file = "LICENSE"}
authors         = [
    {name = "Psydac development team", email = "psydac@googlegroups.com"}
]
maintainers = [
    {name = "Yaman Güçlü"  , email = "yaman.guclu@gmail.com"},
    {name = "Ahmed Ratnani", email = "ratnaniahmed@gmail.com"},
    {name = "Said Hadjout"},
]
keywords     = ["FEM", "IGA", "B-spline", "NURBS"]
classifiers  = ["Programming Language :: Python :: 3"]
dependencies = [

    # Third-party packages from PyPi
    'numpy >= 1.16',
    'scipy >= 1.12',
    'sympy >= 1.5',
    'matplotlib',
    'pytest >= 4.5',
    'pytest-xdist >= 1.16',
    'pyyaml >= 5.1',
    'packaging',
    'pyevtk',

    # Our packages from PyPi
    'sympde == 0.19.0',
    'pyccel >= 1.11.2',
    'gelato == 0.12',

    # In addition, we depend on mpi4py and h5py (MPI version).
    # Since h5py must be built from source, we run the commands
    #
    # python3 -m pip install requirements.txt
    # python3 -m pip install .
    'mpi4py',
    'h5py',

    # When pyccel is run in parallel with MPI, it uses tblib to pickle
    # tracebacks, which allows mpi4py to broadcast exceptions
    'tblib',

    # IGAKIT - not on PyPI
    'igakit @ https://github.com/dalcinl/igakit/archive/refs/heads/master.zip'
]

[project.optional-dependencies]
test = [
    "pytest-cov >= 5.0.0",
]

[project.urls]
Homepage      = "https://github.com/pyccel/psydac"
Documentation = "https://pyccel.github.io/psydac"
Repository    = "https://github.com/pyccel/psydac.git"

[project.scripts]
psydac-mesh = "psydac.cmd.mesh:main"

[tool.setuptools.packages.find]
include = ["psydac*"]
exclude = ["*__psydac__*"]
namespaces = false

[tool.setuptools.package-data]
"*" = ["*.txt"]

[tool.coverage.run]
branch = true
omit = [
    # Exclude pyccelised kernels
    "*/__psydac__/*",
    # Examples don't need to be covered
    "*/examples/*",
    # Unit tests shouldn't be included too
    "*/tests/*",
    ]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

# Ignore source code that can’t be found, emitting a warning instead of an exception.
ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"
